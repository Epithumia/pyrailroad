{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pyrailroad-railroad-diagram-generator","title":"PyRailroad : Railroad-Diagram Generator","text":"Generate Some railroad diagrams and more <p>PyRailroad is a Python package to draw railroad (or syntax) diagrams. Based largely on railroad-diagrams and the partial parser, both by tabatkins</p> <p>This package can be used as a stand-alone (command-line interface) generator or as a library. this generates railroad diagrams (like what JSON.org uses) using SVG.</p> <p>Railroad diagrams, or syntax diagrams, are useful in representing grammar in the programming sense.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Install it with pip: <code>python3 -m pip install pyrailroad</code></p> <p>After that, <code>py-railroad --help</code> will show you some help.</p> <p>This tool cas be used standalone as a command line program (CLI) or as a library. The former will give you details about the syntax of the input files or code used to generate the various diagram elements.</p> <p>A Gallery is also coming soon to see how all the elements interact together.</p>"},{"location":"gallery/","title":"Diagram gallery","text":"<p>A simplified SELECT statement in SQL :</p> <p> SELECT column , FROM table , WHERE condition</p> <p><code>parameters.yaml</code>:</p> <pre><code>type: sql\n</code></pre> <p><code>select.yaml</code>:</p> <pre><code>element: Sequence\nitems:\n  - element: Arrow\n  - element: Terminal\n    text: SELECT\n  - element: Arrow\n  - element: OneOrMore\n    item:\n      element: NonTerminal\n      text: column\n    repeat:\n      element: Sequence\n      items:\n        - element: Arrow\n          direction: left\n        - element: Terminal\n          text: ','\n        - element: Arrow\n          direction: left\n  - element: Arrow\n  - element: Terminal\n    text: FROM\n  - element: Arrow\n  - element: OneOrMore\n    item:\n      element: NonTerminal\n      text: table\n    repeat:\n      element: Sequence\n      items:\n        - element: Arrow\n          direction: left\n        - element: Terminal\n          text: ','\n        - element: Arrow\n          direction: left\n  - element: Arrow\n  - element: Terminal\n    text: WHERE\n  - element: Arrow\n  - element: NonTerminal\n    text: condition\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 Rafael Lopez</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#v030","title":"v0.3.0","text":"<p>First release. This is on par with tabatkins' railroad.py with a couple fixes.</p> <ul> <li>CLI functionality is mostly complete, and documented;</li> <li>Parser for Bikeshed DSL</li> <li>Parser for Json</li> <li>Parser for YAML</li> <li>library usage needs documentation.</li> </ul>"},{"location":"release-notes/#v031","title":"v0.3.1","text":"<ul> <li>Added an Arrow element to have diagrams with explicit orientation of paths.</li> </ul>"},{"location":"release-notes/#v032","title":"v0.3.2","text":"<ul> <li>Added support for external css files in yaml and json mode.</li> </ul>"},{"location":"release-notes/#v040","title":"v0.4.0","text":"<ul> <li>Added parsing of EBNF grammar on a best-effort basis. This notably doesn't include eliminating recursions or reductions. Best used to generate a JSON representation then tweaking that to get the desired result.</li> </ul>"},{"location":"cli/","title":"Index","text":""},{"location":"cli/#command-line-interface","title":"Command Line Interface","text":""},{"location":"cli/#using-pyrailroad","title":"Using PyRailroad","text":"<p>Usage: <code>py-railroad [OPTIONS] COMMAND [ARGS]...</code></p> <p>Options: <code>--help</code> : shows the help message.</p> <p>Commands:</p> <ul> <li><code>dsl</code>: parses a DSL FILE for railroad diagrams, based on significant whitespace and writes it into TARGET file.</li> <li><code>json</code>: parses a JSON FILE for railroad diagrams and writes it into TARGET file.</li> <li><code>yaml</code>: parses a YAML FILE for railroad diagrams and writes it into TARGET file.</li> <li><code>ebnf</code>: parses a grammar FILE in EBNF format and writes all the definitions in separate files in the TARGET directory.</li> </ul> <p>For both <code>json</code>, <code>yaml</code> and <code>ebnf</code>, various parameters of the diagram engine can be specified in a PARAMETERS file. For <code>dsl</code>, two additional options exist:</p> <ul> <li><code>--simple</code>: draws the diagram using the \"simple\" style.</li> <li><code>--standalone</code>: embeds a default stylesheet inside the output for rendering.</li> </ul> <p>Both styles are named so in the original code and haven't been changed (yet).</p> <p>For <code>ebnf</code>, there is another option:</p> <ul> <li><code>--to-json</code>: writes the diagrams into JSON files instead of SVG files.</li> </ul> <p>Examples:</p> DSLJSONYAMLEBNF <p>Basic usage:</p> <pre><code>py-railroad dsl diagram_source.dsl diagram_output.svg\n</code></pre> <p>Generate a diagram using the simple style:</p> <pre><code>py-railroad dsl diagram_source.dsl diagram_output.svg --simple\n</code></pre> <p>Generate a standalone diagram:</p> <pre><code>py-railroad dsl diagram_source.dsl diagram_output.svg --standalone\n</code></pre> <p>Basic usage (default parameters):</p> <pre><code>py-railroad json diagram_source.json diagram_output.svg\n</code></pre> <p>Usage with a parameters file:</p> <pre><code>py-railroad json diagram_source.json diagram_output.svg custom_parameters.json\n</code></pre> <p>Basic usage (default parameters):</p> <pre><code>py-railroad yaml diagram_source.json diagram_output.svg\n</code></pre> <p>Usage with a parameters file:</p> <pre><code>py-railroad yaml diagram_source.yaml diagram_output.svg my_parameters.yaml\n</code></pre> <p>Basic usage:</p> <pre><code>py-railroad ebnf grammar.ebnf output_dir\n</code></pre> <p>Usage with a parameters file:</p> <pre><code>py-railroad ebnf grammar.ebnf output_dir my_parameters.json\n</code></pre> <p>Usage with a parameters file, write JSON files instead of SVG:</p> <pre><code>py-railroad ebnf --to-json grammar.ebnf output_dir my_parameters.json\n</code></pre> <p>DSL support was initially developed by tabatkins in railroadparser.py and extended to support all the elements from railroad-diagrams that were missing. While complete in terms of elements, customization is limited to simple/complex styles and standalone or not. Several customizations of the diagram and of elements themselves are only available using the JSON or YAML parser.</p>"},{"location":"cli/#diagram-syntax","title":"Diagram syntax","text":"<p>Diagrams are written in files using one of DSL, JSON or YAML languages. In this section we'll go over the various elements that go in a diagram and the output obtained. Unless otherwise noted, the output show is done using the simple style and no other parameter changed.</p> <p>There are three categories of elements:</p> <ul> <li>Base elements</li> <li>Text elements</li> <li>Block elements</li> </ul>"},{"location":"cli/#ebnf-grammar","title":"EBNF Grammar","text":"<p>Unfortunately, there is too much to say and too many variants to explain. This program assumes that you know what you are doing if using EBNF as input.</p> <p>If you wish to learn more, the Wikipedia article might be useful, as well as this article by  Federico Tomassetti</p> <p>This program will attempt to guess the correct EBNF grammar for you, but you might have to rewrite a few clauses/items, or in the worst case, dig into the code and submit a bug report or better yet, a pull request to add the missing grammar.</p>"},{"location":"cli/base_elem/","title":"Base elements","text":""},{"location":"cli/base_elem/#base-elements","title":"Base elements","text":"<p>These are base diagram elements and are automatically added if omitted since they represent the whole diagram, start and end thereof respectively.</p>"},{"location":"cli/base_elem/#diagram","title":"Diagram","text":"<p>The root element of a railroad diagram is the Diagram element. If the input does not start with a Diagram, then one is automatically inserted at the root and will include all the elements in the input as its sub-elements.</p>"},{"location":"cli/base_elem/#syntax","title":"Syntax","text":"DSLJSONYAML <pre><code>Diagram:\n    ...\n</code></pre> <pre><code>{\n    \"element\": \"Diagram\",\n    \"items\": [\n        ...\n    ]\n}\n</code></pre> <pre><code>element: Diagram\nitems:\n- ...\n</code></pre>"},{"location":"cli/base_elem/#start","title":"Start","text":"<p>Start is an element that represents the start of the diagram. If it is not explicitly added, it will be inserted as the first element. It can take an optional <code>label</code> as a property with all three parsers, and an optional <code>type</code> property in JSON and YAML.</p>"},{"location":"cli/base_elem/#syntax_1","title":"Syntax","text":"DSLJSONYAML <p>Without a label:</p> <pre><code>Start:\n</code></pre> <p>Without a label:</p> <pre><code>Start: my label\n</code></pre> <p>Without a label:</p> <pre><code>{\n    \"element\": \"Start\"\n}\n</code></pre> <p>With a label:</p> <pre><code>{\n    \"element\": \"Start\",\n    \"label\": \"my label\"\n}\n</code></pre> <p>With the sql type:</p> <pre><code>{\n    \"element\": \"Start\",\n    \"type\": \"sql\"\n}\n</code></pre> <p>Without a label:</p> <pre><code>element: Start\n</code></pre> <p>With a label</p> <pre><code>element: Start\nlabel: my label\n</code></pre> <p>With the sql type:</p> <pre><code>element: Start\ntype: sql\n</code></pre>"},{"location":"cli/base_elem/#properties","title":"Properties","text":"<ul> <li>label: a string</li> <li>type: one of simple, complex or sql. Setting this property at the element level will override what is specified in the parameter file.</li> </ul>"},{"location":"cli/base_elem/#output","title":"Output","text":"Without a label <p> my label</p> With a label <p> </p> With sql type"},{"location":"cli/base_elem/#end","title":"End","text":"<p>End is symmetric with Start and represents the end of the diagram. If it is not explicitly added, it will be inserted as the last element. It can take an optional <code>type</code> as a property in JSON and YAML.</p>"},{"location":"cli/base_elem/#syntax_2","title":"Syntax","text":"DSLJSONYAML <pre><code>End:\n</code></pre> <p>Without a label:</p> <pre><code>{\n    \"element\": \"End\"\n}\n</code></pre> <p>With sql type:</p> <pre><code>{\n    \"element\": \"End\",\n    \"type\": \"sql\"\n}\n</code></pre> <p>Without a label:</p> <pre><code>element: End\n</code></pre> <p>With sql type:</p> <pre><code>element: End\ntype: sql\n</code></pre>"},{"location":"cli/base_elem/#properties_1","title":"Properties","text":"<ul> <li>type: one of simple, complex or sql. Setting this property at the element level will override what is specified in the parameter file.</li> </ul>"},{"location":"cli/base_elem/#output_1","title":"Output","text":"Without a label With sql type"},{"location":"cli/block_elem/","title":"Block elements","text":""},{"location":"cli/block_elem/#block-elements","title":"Block elements","text":"<p>Block elements helps you structure your diagram logically and/or spatially. The spatial elements are: Sequence, Stack and Group; Logical elements are OptionalSequence, Choice, MultipleChoice, Optional, OneOrMore, ZeroOrMore, AlternatingSequence, and finally HorizontalChoice combines both spatial and logic.</p>"},{"location":"cli/block_elem/#sequence","title":"Sequence","text":"<p>Sequence is a concatenation of other elements and requires at least one child element.</p>"},{"location":"cli/block_elem/#syntax","title":"Syntax","text":"DSLJSONYAML <pre><code>Sequence:\n    ...\n</code></pre> <pre><code>{\n    \"element\": \"Sequence\",\n    \"items\": [\n        ...\n    ]\n}\n</code></pre> <pre><code>element: Sequence\nitems:\n- ...\n</code></pre>"},{"location":"cli/block_elem/#properties","title":"Properties","text":"<ul> <li>items: an array/list of elements</li> </ul>"},{"location":"cli/block_elem/#output","title":"Output","text":"<p> 1 2 3</p> Sequence of three Terminals 1, 2 and 3"},{"location":"cli/block_elem/#stack","title":"Stack","text":"<p>Identical to a Sequence, but the items are stacked vertically rather than horizontally. Best used when a simple Sequence would be too wide; instead, you can break the items up into a Stack of Sequences of an appropriate width.</p>"},{"location":"cli/block_elem/#syntax_1","title":"Syntax","text":"DSLJSONYAML <pre><code>Stack:\n    ...\n</code></pre> <pre><code>{\n    \"element\": \"Stack\",\n    \"items\": [\n        ...\n    ]\n}\n</code></pre> <pre><code>element: Stack\nitems:\n- ...\n</code></pre>"},{"location":"cli/block_elem/#properties_1","title":"Properties","text":"<ul> <li>items: an array/list of elements</li> </ul>"},{"location":"cli/block_elem/#output_1","title":"Output","text":"<p> 1 2 3</p> Stack of three Terminals 1, 2 and 3"},{"location":"cli/block_elem/#group","title":"Group","text":"<p>Highlights its child with a dashed outline, and optionally labels it. Passing a string as the label constructs a Comment, or you can build one yourself (to give an href or title). The DSL parser only accepts text labels, the JSON and YAML parsers accept any element as well as text.</p>"},{"location":"cli/block_elem/#syntax_2","title":"Syntax","text":"DSLJSONYAML <p>Without a label:</p> <pre><code>Group:\n    ...\n</code></pre> <p>With a label:</p> <pre><code>Group: label\n    ...\n</code></pre> <p>Without a label:</p> <pre><code>{\n    \"element\": \"Group\",\n    \"item\": {\n        ...\n    }\n}\n</code></pre> <p>With a label:</p> <pre><code>{\n    \"element\": \"Group\",\n    \"label\": ...\n    \"item\": {\n        ...\n    }\n}\n</code></pre> <p>Without a label:</p> <pre><code>element: Group\nitem:\n  ...\n</code></pre> <p>With a label:</p> <pre><code>element: Group\nlabel: ...\nitem:\n  ...\n</code></pre>"},{"location":"cli/block_elem/#properties_2","title":"Properties","text":"<ul> <li>label: optional, can be a string, or when using the JSON or YAML parsers, any element. The most likely case is using a Comment but any element will work.</li> <li>item : a single element, mandatory.</li> </ul>"},{"location":"cli/block_elem/#output_2","title":"Output","text":"<p> foo option 1 option 2 bar</p> Group with no label <p> foo option 1 option 2 DefinitionDefinition bar</p> Group with a (Comment) label"},{"location":"cli/block_elem/#choice","title":"Choice","text":"<p>An exclusive choice among all branches.</p>"},{"location":"cli/block_elem/#syntax_3","title":"Syntax","text":"DSLJSONYAML <p>Without default:</p> <pre><code>Choice:\n    ...\n    ...\n</code></pre> <p>With a default branch:</p> <pre><code>Choice: value\n    ...\n    ...\n</code></pre> <p>Without default:</p> <pre><code>{\n    \"element\": \"Choice\",\n    \"items\": [\n        ...\n        ...\n    ]\n}\n</code></pre> <p>With a default branch:</p> <pre><code>{\n    \"element\": \"Choice\",\n    \"default\": value,\n    \"items\": [\n        ...\n        ...\n    ]\n}\n</code></pre> <p>Without default:</p> <pre><code>element: Choice\nitems:\n  ...\n  ...\n</code></pre> <p>With a default branch:</p> <pre><code>element: Choice\ndefault: value\nitems:\n  ...\n  ...\n</code></pre>"},{"location":"cli/block_elem/#properties_3","title":"Properties","text":"<ul> <li>default: int, optional (if not set: 0). Specifies which child is the \"normal\" choice and should go in the middle (starting from 0 for the first child).</li> <li>items: an array/list of elements. Each element will have its own line.</li> </ul>"},{"location":"cli/block_elem/#output_3","title":"Output","text":"<p> 1 2 3</p> Choice between three values"},{"location":"cli/block_elem/#horizontalchoice","title":"HorizontalChoice","text":"<p>Identical to Choice, but the items are stacked horizontally rather than vertically. There's no \"straight-line\" choice, so it just takes a list of children. Best used when a simple Choice would be too tall; instead, you can break up the items into a HorizontalChoice of Choices of an appropriate height.</p>"},{"location":"cli/block_elem/#syntax_4","title":"Syntax","text":"DSLJSONYAML <pre><code>HorizontalChoice:\n    ...\n    ...\n</code></pre> <pre><code>{\n    \"element\": \"HorizontalChoice\",\n    \"items\": [\n        ...\n        ...\n    ]\n}\n</code></pre> <pre><code>element: HorizontalChoice\nitems:\n  ...\n  ...\n</code></pre>"},{"location":"cli/block_elem/#properties_4","title":"Properties","text":"<ul> <li>items: an array/list of elements. Each element will have its own \"column\".</li> </ul>"},{"location":"cli/block_elem/#output_4","title":"Output","text":"<p> 1 2 3 4 5 6</p> Choice between six values, broken in two blocks"},{"location":"cli/block_elem/#multiplechoice","title":"MultipleChoice","text":"<p>Similar to a Choice, but more than one branch can be taken.</p>"},{"location":"cli/block_elem/#syntax_5","title":"Syntax","text":"DSLJSONYAML <pre><code>MultipleChoice: value any|all\n    ...\n    ...\n</code></pre> <pre><code>{\n    \"element\": \"MultipleChoice\",\n    \"default\": value,\n    \"type\": \"any|all\",\n    \"items\": [\n        ...\n        ...\n    ]\n}\n</code></pre> <pre><code>element: MultipleChoice\ndefault: value\ntype: any|all\nitems:\n  ...\n  ...\n</code></pre>"},{"location":"cli/block_elem/#properties_5","title":"Properties","text":"<p>All properties are mandatory.</p> <ul> <li>default: int, specifies which child is the \"normal\" choice and should go in the middle</li> <li>type: either any (1+ branches can be taken) or all  (all branches must be taken).</li> <li>items: an array/list of elements. Each element will have its own line.</li> </ul>"},{"location":"cli/block_elem/#output_5","title":"Output","text":"<p> 1 2 3 take one or more branches, once each, in any order1+\u21ba</p> MultipleChoice: any of three <p> 1 2 3 take all branches, once each, in any orderall\u21ba</p> MultipleChoice: all of three"},{"location":"cli/block_elem/#optional","title":"Optional","text":"<p>A shorthand for Choice(0|1, Skip(), child).</p>"},{"location":"cli/block_elem/#syntax_6","title":"Syntax","text":"DSLJSONYAML <p>Don't skip:</p> <pre><code>Optional:\n    ...\n</code></pre> <p>Skip:</p> <pre><code>Optional: skip\n    ...\n</code></pre> <p>Don't skip:</p> <pre><code>{\n    \"element\": \"Optional\",\n    \"item\": {\n        ...\n    }\n}\n</code></pre> <p>Skip:</p> <pre><code>{\n    \"element\": \"Optional\",\n    \"skip\": true,\n    \"item\": {\n        ...\n    }\n}\n</code></pre> <p>Don't skip:</p> <pre><code>element: Optional\nitem:\n  ...\n</code></pre> <p>Skip:</p> <pre><code>element: Optional\nskip: true\nitem:\n  ...\n</code></pre>"},{"location":"cli/block_elem/#properties_6","title":"Properties","text":"<ul> <li>skip: with DSL, this is either empty or the string \"skip\" ; in JSON/YAML, this is an optional boolean (false if not specified).</li> <li>item: an element, mandatory.</li> </ul>"},{"location":"cli/block_elem/#output_6","title":"Output","text":"<p> foo</p> Optional without skip <p> foo</p> Optional with skip"},{"location":"cli/block_elem/#optionalsequence","title":"OptionalSequence","text":"<p>A Sequence where every item is individually optional, but at least one item must be chosen.</p> DSLJSONYAML <pre><code>OptionalSequence:\n    ...\n</code></pre> <pre><code>{\n    \"element\": \"OptionalSequence\",\n    \"items\": [\n        ...\n    ]\n}\n</code></pre> <pre><code>element: OptionalSequence\nitems:\n- ...\n</code></pre>"},{"location":"cli/block_elem/#properties_7","title":"Properties","text":"<ul> <li>items: an array/list of elements</li> </ul>"},{"location":"cli/block_elem/#output_7","title":"Output","text":"<p> 1 2 3</p> OptionalSequence of three Terminals 1, 2 and 3"},{"location":"cli/block_elem/#oneormore","title":"OneOrMore","text":"<p>A loop that requires taking the first element at least once. The loop is typically a Comment but can be any element.</p>"},{"location":"cli/block_elem/#syntax_7","title":"Syntax","text":"DSLJSONYAML <p>Simple repeat:</p> <pre><code>OneOrMore:\n    ...\n</code></pre> <p>Labelled repeat:</p> <pre><code>OneOrMore: label\n    ...\n</code></pre> <p>Simple repeat:</p> <pre><code>{\n    \"element\": \"OneOrMore\",\n    \"item\": {\n        ...\n    }\n}\n</code></pre> <p>Repeat with an element:</p> <pre><code>{\n    \"element\": \"OneOrMore\",\n    \"item\": {\n        ...\n    },\n    \"repeat\": {\n        ...\n    }\n}\n</code></pre> <p>Simple repeat:</p> <pre><code>element: OneOrMore\nitem:\n  ...\n</code></pre> <p>Repeat with an element:</p> <pre><code>element: OneOrMore\nitem:\n  ...\nrepeat:\n  ...\n</code></pre>"},{"location":"cli/block_elem/#properties_8","title":"Properties","text":"<ul> <li>item : a single element, mandatory.</li> <li>repeat: if empty, will just draw a line, else will insert the element on the loop. With the DSL parser, this is a string.</li> </ul>"},{"location":"cli/block_elem/#output_8","title":"Output","text":"<p> foo </p> Simple OneOrMore <p> foo bar</p> OneOrMore with a label or Comment <p> Sequence( element , )</p> OneOrMore with a Terminal (\",\")"},{"location":"cli/block_elem/#zeroormore","title":"ZeroOrMore","text":"<p>A shorthand for Optional(OneOrMore(child, repeat), skip). Like OneOrMore, this is a loop, but it can be skipped.</p>"},{"location":"cli/block_elem/#syntax_8","title":"Syntax","text":"DSLJSONYAML <p>Simple ZeroOrMore:</p> <pre><code>ZeroOrMore:\n    ...\n</code></pre> <p>ZeroOrMore with an element and skip as default::</p> <pre><code>OneOrMore: skip\n    ...\n    ... (repeat)\n</code></pre> <p>Simple ZeroOrMore:</p> <pre><code>{\n    \"element\": \"ZeroOrMore\",\n    \"item\": {\n        ...\n    }\n}\n</code></pre> <p>ZeroOrMore with an element and skip as default:</p> <pre><code>{\n    \"element\": \"ZeroOrMore\",\n    \"item\": {\n        ...\n    },\n    \"skip\": true,\n    \"repeat\": {\n        ...\n    }\n}\n</code></pre> <p>Simple ZeroOrMore:</p> <pre><code>element: ZeroOrMore\nitem:\n  ...\n</code></pre> <p>ZeroOrMore with an element and skip as default:</p> <pre><code>element: OneOrMore\nskip: true\nitem:\n  ...\nrepeat:\n  ...\n</code></pre>"},{"location":"cli/block_elem/#properties_9","title":"Properties","text":"<ul> <li>item : a single element, mandatory.</li> <li>repeat: if omitted, will just draw a line, else will insert the element on the loop. With the DSL parser, this is a string.</li> <li>skip: with DSL, this is either empty or the string \"skip\" ; in JSON/YAML, this is an optional boolean (false if not specified).</li> </ul>"},{"location":"cli/block_elem/#output_9","title":"Output","text":"<p> foo </p> Simple ZeroOrMore <p> foo bar</p> ZeroOrMore with skip and a label"},{"location":"cli/block_elem/#alternatingsequence","title":"AlternatingSequence","text":"<p>Similar to a OneOrMore, where you must alternate between the two choices, but allows you to start and end with either element (OneOrMore requires you to start and end with the \"child\" node).</p>"},{"location":"cli/block_elem/#syntax_9","title":"Syntax","text":"DSLJSONYAML <pre><code>AlternatingSequence:\n    ...\n    ...\n</code></pre> <pre><code>{\n    \"element\": \"AlternatingSequence\",\n    \"items\": [\n        ...\n        ...\n    ]\n}\n</code></pre> <pre><code>element: AlternatingSequence\nitems:\n- ...\n- ...\n</code></pre>"},{"location":"cli/block_elem/#properties_10","title":"Properties","text":"<ul> <li>items: an array/list of exactly two elements</li> </ul>"},{"location":"cli/block_elem/#output_10","title":"Output","text":"<p> foo bar</p> AlternatingSequence"},{"location":"cli/text_elem/","title":"Text elements","text":""},{"location":"cli/text_elem/#text-elements","title":"Text elements","text":"<p>Text elements are single elements on the diagram and the base building blocks. They are either Expression, Terminal, NonTerminal, Comment, Arrow or Skip.</p>"},{"location":"cli/text_elem/#expression","title":"Expression","text":"<p>An expression is either a sub-diagram for a bigger diagram (typically, a clause in a grammar, which will appear as non-terminal in another part of the grammar), or something that the EBNF parser couldn't handle on its own (and will need a little help rewriting).</p> <p>For exemple, the W3C blindfold grammar for EBNF is specified as follows:</p> <pre><code>grammar ::= clause*                   # A grammar is zero or more clauses\nclause  ::= clauseName \"::=\" pattern  # A clause associates a name with a pattern\npattern ::= branch (\"|\" branch)*      # A pattern has one or more branches (alternatives)\nbranch  ::= term+                     # A branch is one or more terms\nterm    ::=                           # A term is:  \n            string                    #  a string in single or double quotes\n          | charset                   #  a character set (as in perl: [a-z0-9], etc) \n          | \"(\" pattern \")\"           #  a pattern, in parentheses \n          | clauseName                #  a clauseName, matching a pattern by name\n          | term [*+?]                #  a term followed by a \"*\", \"+\", or \"?\" operator\n</code></pre> <p>There are five expressions in that grammar, and running py-railroad on it produces the following diagrams:</p> <p> grammar clause </p> grammar <p> clause clauseName ::= pattern</p> clause <p> pattern branch | branch </p> pattern <p> branch term </p> branch <p> term charset string ( pattern ) clauseName term [*+?]</p> term <p>In the last expression, the last element is [*+?] because the parser treated it as a character range and couldn't tell whether it was a finite list of characters (a Choice) or an actual range (ie. \"all characters from a to z\").</p>"},{"location":"cli/text_elem/#syntax","title":"Syntax","text":"DSLJSONYAML <p>Basic syntax:</p> <pre><code>Expression: my text\n</code></pre> <p>With a href:</p> <pre><code>Expression \"https://github.com\": github\n</code></pre> <p>Basic syntax:</p> <pre><code>{\n    \"element\": \"Expression\",\n    \"text\": \"my expression\"\n}\n</code></pre> <p>With href:</p> <pre><code>{\n    \"element\": \"Expression\",\n    \"text\": \"github\",\n    \"href\": \"https://github.com\"\n}\n</code></pre> <p>With additional options:</p> <pre><code>{\n    \"element\": \"Expression\",\n    \"text\": \"github\",\n    \"href\": \"https://github.com\",\n    \"title\": \"This is a link\",\n    \"cls\": \"custom_terminal\"\n}\n</code></pre> <p>Basic:</p> <pre><code>element: Expression\ntext: my expression\n</code></pre> <p>With href</p> <pre><code>element: Expression\ntext: github\nhref: https://github.com\n</code></pre> <p>With additional options:</p> <pre><code>element: Expression\ntext: github\nhref: https://github.com\ntitle: This is a link\ncls: custom_terminal\n</code></pre>"},{"location":"cli/text_elem/#properties","title":"Properties","text":""},{"location":"cli/text_elem/#output","title":"Output","text":"<p> my expression</p> Expression <p> github</p> Expression with href <p> githubThis is a link</p> Expression with additional options"},{"location":"cli/text_elem/#terminal","title":"Terminal","text":"<p>Terminal represents literal text. The Terminal element has a required property <code>text</code>, and three optional properties <code>href</code>, <code>title</code> and <code>cls</code>. The last two properties are only available with the JSON and YAML parsers.</p>"},{"location":"cli/text_elem/#syntax_1","title":"Syntax","text":"DSLJSONYAML <p>Basic syntax:</p> <pre><code>Terminal: my text\n</code></pre> <p>With a href:</p> <pre><code>Terminal\"https://github.com\": github\n</code></pre> <p>Basic syntax:</p> <pre><code>{\n    \"element\": \"Terminal\",\n    \"text\": \"my text\"\n}\n</code></pre> <p>With href:</p> <pre><code>{\n    \"element\": \"Terminal\",\n    \"text\": \"github\",\n    \"href\": \"https://github.com\"\n}\n</code></pre> <p>With additional options:</p> <pre><code>{\n    \"element\": \"Terminal\",\n    \"text\": \"github\",\n    \"href\": \"https://github.com\",\n    \"title\": \"This is a link\",\n    \"cls\": \"custom_terminal\"\n}\n</code></pre> <p>Without a label:</p> <pre><code>element: Terminal\ntext: my text\n</code></pre> <p>With href</p> <pre><code>element: Terminal\ntext: github\nhref: https://github.com\n</code></pre> <p>With additional options:</p> <pre><code>element: Terminal\ntext: github\nhref: https://github.com\ntitle: This is a link\ncls: custom_terminal\n</code></pre>"},{"location":"cli/text_elem/#properties_1","title":"Properties","text":"<ul> <li>text: string, required</li> <li>href: string, optional</li> <li>title: string, optional, only available with the JSON and YAML parsers</li> <li>cls: string, optional, only available with the JSON and YAML parsers</li> </ul>"},{"location":"cli/text_elem/#output_1","title":"Output","text":"<p> my text</p> Simple Terminal <p> githubgithub</p> With href <p> githubThis is a link</p> With additional options (hover for the title)"},{"location":"cli/text_elem/#nonterminal","title":"NonTerminal","text":"<p>NonTerminal represents another production or diagram. The NonTerminal element has a required property <code>text</code>, and three optional properties <code>href</code>, <code>title</code> and <code>cls</code>. The last two properties are only available with the JSON and YAML parsers.</p>"},{"location":"cli/text_elem/#syntax_2","title":"Syntax","text":"DSLJSONYAML <p>Basic syntax:</p> <pre><code>NonTerminal: my text\n</code></pre> <p>With a href:</p> <pre><code>NonTerminal \"https://github.com\": github\n</code></pre> <p>Basic syntax:</p> <pre><code>{\n    \"element\": \"NonTerminal\",\n    \"text\": \"my text\"\n}\n</code></pre> <p>With href:</p> <pre><code>{\n    \"element\": \"NonTerminal\",\n    \"text\": \"github\",\n    \"href\": \"https://github.com\"\n}\n</code></pre> <p>With additional options:</p> <pre><code>{\n    \"element\": \"NonTerminal\",\n    \"text\": \"github\",\n    \"href\": \"https://github.com\",\n    \"title\": \"This is a link\",\n    \"cls\": \"custom_terminal\"\n}\n</code></pre> <p>Without a label:</p> <pre><code>element: NonTerminal\ntext: my text\n</code></pre> <p>With href</p> <pre><code>element: NonTerminal\ntext: github\nhref: https://github.com\n</code></pre> <p>With additional options:</p> <pre><code>element: NonTerminal\ntext: github\nhref: https://github.com\ntitle: This is a link\ncls: custom_terminal\n</code></pre>"},{"location":"cli/text_elem/#properties_2","title":"Properties","text":"<ul> <li>text: string, required</li> <li>href: string, optional</li> <li>title: string, optional, only available with the JSON and YAML parsers</li> <li>cls: string, optional, only available with the JSON and YAML parsers</li> </ul>"},{"location":"cli/text_elem/#output_2","title":"Output","text":"<p> my text</p> Simple Terminal <p> githubgithub</p> With href <p> githubgithubThis is a link</p> With additional options (hover for the title)"},{"location":"cli/text_elem/#comment","title":"Comment","text":"<p>Represents a comment. The Comment element has a required property <code>text</code>, and three optional properties <code>href</code>, <code>title</code> and <code>cls</code>. The last two properties are only available with the JSON and YAML parsers.</p>"},{"location":"cli/text_elem/#syntax_3","title":"Syntax","text":"DSLJSONYAML <p>Basic syntax:</p> <pre><code>Comment: my text\n</code></pre> <p>With a href:</p> <pre><code>Comment \"https://github.com\": github\n</code></pre> <p>Basic syntax:</p> <pre><code>{\n    \"element\": \"Comment\",\n    \"text\": \"my text\"\n}\n</code></pre> <p>With href:</p> <pre><code>{\n    \"element\": \"Comment\",\n    \"text\": \"github\",\n    \"href\": \"https://github.com\"\n}\n</code></pre> <p>With additional options:</p> <pre><code>{\n    \"element\": \"Comment\",\n    \"text\": \"github\",\n    \"href\": \"https://github.com\",\n    \"title\": \"This is a link\",\n    \"cls\": \"custom_terminal\"\n}\n</code></pre> <p>Without a label:</p> <pre><code>element: Comment\ntext: my text\n</code></pre> <p>With href</p> <pre><code>element: Comment\ntext: github\nhref: https://github.com\n</code></pre> <p>With additional options:</p> <pre><code>element: Comment\ntext: github\nhref: https://github.com\ntitle: This is a link\ncls: custom_terminal\n</code></pre>"},{"location":"cli/text_elem/#properties_3","title":"Properties","text":"<ul> <li>text: string, required</li> <li>href: string, optional</li> <li>title: string, optional, only available with the JSON and YAML parsers</li> <li>cls: string, optional, only available with the JSON and YAML parsers</li> </ul>"},{"location":"cli/text_elem/#output_3","title":"Output","text":"<p> my text</p> Simple Comment <p> githubgithub</p> With href <p> githubgithubThis is a link</p> With additional options (hover for the title)"},{"location":"cli/text_elem/#arrow","title":"Arrow","text":""},{"location":"cli/text_elem/#syntax_4","title":"Syntax","text":"DSLJSONYAML <p>Arrow right:</p> <pre><code>Arrow:\n</code></pre> <p>With a direction:</p> <pre><code>Arrow: left|right\n</code></pre> <p>Undirected:</p> <pre><code>Arrow: undirected\n</code></pre> <p>Arrow right:</p> <pre><code>{\n    \"element\": \"Arrow\"\n}\n</code></pre> <p>With a direction:</p> <pre><code>{\n    \"element\": \"Arrow\",\n    \"direction\": \"left|right\"\n}\n</code></pre> <p>Undirected (draws a line):</p> <pre><code>{\n    \"element\": \"Arrow\",\n    \"direction\": \"undirected\"\n}\n</code></pre> <p>Arrow right:</p> <pre><code>element: Arrow\n</code></pre> <p>With a direction:</p> <pre><code>element: Arrow\ndirection: left|right\n</code></pre> <p>Undirected:</p> <pre><code>element: Arrow\ndirection: undirected\n</code></pre>"},{"location":"cli/text_elem/#properties_4","title":"Properties","text":"<p>direction: optional string, can be left or right to orient the arrow left or right, or any other string to draw a plain line instead.</p>"},{"location":"cli/text_elem/#output_4","title":"Output","text":"Arrow left Arrow right Undirected: a line"},{"location":"cli/text_elem/#skip","title":"Skip","text":"<p>An empty line. Used for vertical blocks like Stack.</p>"},{"location":"cli/text_elem/#syntax_5","title":"Syntax","text":"DSLJSONYAML <p>Basic syntax:</p> <pre><code>Skip:\n</code></pre> <p>Basic syntax:</p> <pre><code>{\n    \"element\": \"Skip\"\n}\n</code></pre> <p>Basic syntax:</p> <pre><code>element: Skip\n</code></pre>"},{"location":"cli/text_elem/#properties_5","title":"Properties","text":"<p>This element has no properties.</p>"},{"location":"cli/text_elem/#output_5","title":"Output","text":"<p> foo foo</p> Stack without Skip <p> foo foo</p> Stack with Skip"},{"location":"library/basic_usage/","title":"Basic usage","text":""},{"location":"library/basic_usage/#using-pyrailroad-as-a-library","title":"Using pyrailroad as a library","text":""},{"location":"library/basic_usage/#building-a-diagram","title":"Building a diagram","text":"<p>If you are familiar with tabatkins' railroad-diagrams, building a diagram should be a straightforward task, with a few differences for two elements (Optional and ZeroOrMore).</p> <p>A really simple diagram would be: <pre><code>from pyrailroad.elements import Diagram, Terminal\nd = Diagram(Terminal(\"foo\"))\n</code></pre></p> <p>To write it out as SVG, do: <pre><code># Write an SVG file without stylesheet\nwith open('foo.svg', 'w') as f:\n    d.write_svg(f.write)\n</code></pre> or <pre><code># Write an SVG file with a CSS styleshzeet included\nwith open('foo.svg', 'w') as f:\n    d.write_standalone(f.write)\n</code></pre></p> <p>To crate a text-format diagram instead, do: <pre><code>from sys import stdout\nd.write_text(stdout.write)\n</code></pre></p>"},{"location":"library/basic_usage/#summary-of-elements-used-in-a-diagram","title":"Summary of elements used in a diagram","text":""},{"location":"library/basic_usage/#base-elements","title":"Base elements","text":""},{"location":"library/basic_usage/#diagram","title":"Diagram","text":"<p>The constructor for <code>Diagram</code> takes any element, a dictionary of parameters (to override the diagram class) and an optional type.</p> <p>By default, a <code>Diagram</code> will always include a Start and an End when printed even if they were omitted.</p> <p>Examples</p> <ul> <li> <p>Text element</p> SourceResult <pre><code>from pyrailroad.elements import Diagram\nd = Diagram(\"foo\")\n</code></pre> <p>  foo  </p> </li> <li> <p>A Terminal again (explicitly called), with the sql type     SourceResult <pre><code>from pyrailroad.elements import Diagram, Terminal\nd = Diagram(Terminal(\"foo\"), type=\"sql\")\n</code></pre> <p>  foo  </p> </p> </li> <li> <p>Multiple diagram elements, with the complex type and a parameter override     SourceResult <pre><code>from pyrailroad.elements import Diagram\nd = Diagram(\"foo\", \"bar\", parameters={'diagram_class': 'custom'},type=\"complex\")\n</code></pre> <p>  foo   bar  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#start","title":"Start","text":"<p>This is the element that starts a diagram at the top left, you'd usually only use one. The constructor for <code>Start</code> takes a type (same as Diagram), an optional label and an optional dictionary of parameters to override <code>char_width</code>.</p> <p>Examples</p> <ul> <li> <p>Simple     SourceResult <pre><code>from pyrailroad.elements import Diagram, Start\nd = Diagram(Start(label=\"foo\"))\n</code></pre> <p>  foo  </p> </p> </li> <li> <p>Customized     SourceResult <pre><code>from pyrailroad.elements import Diagram, Start\nd = Diagram(Start(label=\"foo\", parameters={\"char_width\": 25}, type=\"sql\"))\n</code></pre> <p>  foo  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#end","title":"End","text":"<p>This is the opposite end of the diagram. The constructor is similar to Start but doesn't have a label. You can pass a dictionary of parameters, but they have no effect on End (this is kept for practical coding reasons so that all elements can take the full parameters dictionary recursively and use only what they need).</p> <p>Examples</p> <ul> <li> <p>Simple     SourceResult <pre><code>from pyrailroad.elements import Diagram, End\nd = Diagram(End())\n</code></pre> <p> </p> </p> </li> <li> <p>Customized     SourceResult <pre><code>from pyrailroad.elements import Diagram, End\nd = Diagram(End(type=\"sql\"))\n</code></pre> <p> </p> </p> </li> </ul>"},{"location":"library/basic_usage/#text-elements","title":"Text elements","text":""},{"location":"library/basic_usage/#terminal","title":"Terminal","text":"<p>In a grammar, a Terminal is a symbol that cannot be replaced by other symbols of the vocabulary. Typically, this will be keywords for your language/tool, or literals.</p> <p>The constructor for <code>Terminal</code> takes a text, an optional href that will be converted to a link in SVG only, an optional title, a optional class for SVG styling and an optional dictionary of parameters to override <code>char_width</code>.</p> <p>Examples</p> <ul> <li> <p>Simple     SourceResult <pre><code>from pyrailroad.elements import Diagram, Terminal\nd = Diagram(Terminal(\"foo\"))\n</code></pre> <p>  foo  </p> </p> </li> <li> <p>Customized     SourceResult <pre><code>from pyrailroad.elements import Diagram, Terminal\nd = Diagram(Terminal(\"foo\"), Terminal(\"bar\", href=\"https://github.com\", parameters={\"char_width\": 25}, title=\"This is a terminal with a link\", cls=\"term\"))\n</code></pre> <p>  foo   bar   This is a terminal with a link  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#nonterminal","title":"NonTerminal","text":"<p>By opposition, a NonTerminal is a symbol that is replaceable (and likely defined in another diagram).</p> <p>The constructor for <code>NonTerminal</code> takes a text, an optional href that will be converted to a link in SVG only, an optional title, a optional class for SVG styling and an optional dictionary of parameters to override <code>char_width</code>.</p> <ul> <li> <p>Simple     SourceResult <pre><code>from pyrailroad.elements import Diagram, NonTerminal\nd = Diagram(NonTerminal(\"foo\"))\n</code></pre> <p>  foo  </p> </p> </li> <li> <p>Customized     SourceResult <pre><code>from pyrailroad.elements import Diagram, NonTerminal\nd = Diagram(NonTerminal(\"foo\"), NonTerminal(\"bar\", href=\"https://github.com\", parameters={\"char_width\": 25}, title=\"This is a non-terminal with a link\", cls=\"term\"))\n</code></pre> <p>  foo   bar   This is a non-terminal with a link  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#comment","title":"Comment","text":"<p>A comment is a neutral element that is best used to label branches in some of the block elements (repeat lines for example).</p> <p>The constructor for <code>Comment</code> takes a text, an optional href that will be converted to a link in SVG only, an optional title, a optional class for SVG styling and an optional dictionary of parameters to override <code>comment_char_width</code>.</p> <ul> <li> <p>Simple     SourceResult <pre><code>from pyrailroad.elements import Diagram, Comment\nd = Diagram(Comment(\"foo\"))\n</code></pre> <p>  foo  </p> </p> </li> <li> <p>Customized     SourceResult <pre><code>from pyrailroad.elements import Diagram, Comment\nd = Diagram(Comment(\"foo\"), Comment(\"bar\", href=\"https://github.com\", parameters={\"comment_char_width\": 25}, title=\"This is a comment with a link\", cls=\"term\"))\n</code></pre> <p>  foo   bar   This is a comment with a link  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#arrow","title":"Arrow","text":"<p>The arrow element is an addition in pyrailroad over railroad-diagram that lets you add an arrow to a line to help read a longer or more complex diagram.</p> <p>The constructor for <code>Arrow</code> takes an optional direction (and like End, a parameters dictionary that has no effect).</p> <p>Examples</p> <ul> <li> <p>Arrow to the right     SourceResult <pre><code>from pyrailroad.elements import Diagram, Arrow\nd = Diagram(\"going\", Arrow(), \"right\")\n</code></pre> <p>  going   right  </p> </p> </li> <li> <p>Arrow to the left     SourceResult <pre><code>from pyrailroad.elements import Diagram, Arrow\nd = Diagram(\"left\", Arrow(\"left\"), \"going\")\n</code></pre> <p>  left   going  </p> </p> </li> <li> <p>Undirected (similar to a Skip)     SourceResult <pre><code>from pyrailroad.elements import Diagram, Arrow\nd = Diagram(\"step on\", Arrow(\"skip\"), \"no pets\")\n</code></pre> <p>  step on   no pets  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#skip","title":"Skip","text":"<p>This element lets you add spacing in your diagram by adding an empty line (in aStack, typically).</p> <p>The constructor only takes an optional parameters dictionary.</p> <p>Example</p> <ul> <li> <p>One Skip     SourceResult <pre><code>from pyrailroad.elements import Diagram, Stack, Skip\nd = Diagram(Stack(\"one\", Skip(), \"skip\"))\n</code></pre> <p>  one   skip  </p> </p> </li> <li> <p>Three Skips     SourceResult <pre><code>from pyrailroad.elements import Diagram, Stack, Skip\nd = Diagram(Stack(\"three\", Skip(), Skip(), Skip(), \"skips\"))\n</code></pre> <p>  three   skips  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#expression","title":"Expression","text":"<p>The expression element is an addition in pyrailroad over railroad-diagram. It was added to deal with EBNF grammars having ambiguities in their notations which means the parser has to guess for some elements and it can't decide how to represent it other than as an expression. The best example is when a grammar contains a regular expression.</p> <p>The constructor for <code>Expression</code> takes a text, an optional href that will be converted to a link in SVG only, an optional title, a optional class for SVG styling and an optional dictionary of parameters to override <code>char_width</code>.</p> <p>Examples</p> <ul> <li> <p>Simple     SourceResult <pre><code>from pyrailroad.elements import Diagram, Expression\nd = Diagram(Expression(\"foo\"))\n</code></pre> <p>  foo  </p> </p> </li> <li> <p>Customized     SourceResult <pre><code>from pyrailroad.elements import Diagram, Expression\nd = Diagram(Expression(\"foo\"), Expression(\"bar\", href=\"https://github.com\", parameters={\"char_width\": 25}, title=\"This is an expression with a link\", cls=\"term\"))\n</code></pre> <p>  foo   bar   This is an expression with a link  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#block-elements","title":"Block elements","text":""},{"location":"library/basic_usage/#sequence","title":"Sequence","text":"<p>As the name says, this is a sequence of elements. This is a useful container when you build more complex diagrams that use the other block elements (like Stack, for example).</p> <p>The constructor for <code>Sequence</code> takes one or more elements and an optional parameter dictionary.</p> <p>Example</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, Sequence, Arrow\nd = Diagram(Sequence(\"foo\", Arrow(), \"bar\"))\n</code></pre> <p>  foo   bar  </p>"},{"location":"library/basic_usage/#stack","title":"Stack","text":"<p>This allows you to stack elements vertically.</p> <p>The constructor for <code>Stack</code> takes one or more elements and an optional parameter dictionary (to modify the arc radius of curves).</p> <p>Examples</p> <ul> <li> <p>A simple stack</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, Stack\nd = Diagram(Stack(\"foo\", \"bar\"))\n</code></pre> <p>  foo   bar  </p> </li> <li> <p>A customized stack with more elements</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, Stack, Sequence, Terminal, NonTerminal\nd = Diagram(\n        Stack(\n            Sequence(NonTerminal(\"foo\"), Terminal(\"bar\")),\n            Sequence(NonTerminal(\"baz\"), Terminal(\"buzz\")),\n            parameters={'AR':20}\n            )\n        )\n</code></pre> <p>  foo   bar   baz   buzz  </p> </li> </ul>"},{"location":"library/basic_usage/#optionalsequence","title":"OptionalSequence","text":"<p>This block is a sequence of elements where you must choose at least one element among the elements passed to it. If only one element is provided, it is turned into a Sequence.</p> <p>The constructor for <code>OptionalSequence</code> takes one or more elements and an optional parameter dictionary (to modify the arc radius of curves).</p> <p>Examples</p> <ul> <li> <p>A simple optional sequence</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, OptionalSequence\nd = Diagram(OptionalSequence(\"foo\", \"bar\"))\n</code></pre> <p>  foo   bar  </p> </li> <li> <p>A customized optional sequence with more elements</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, OptionalSequence, Sequence, Terminal, NonTerminal, Expression\nd = Diagram(\n        OptionalSequence(\n            Sequence(NonTerminal(\"foo\"), Terminal(\"bar\")),\n            Sequence(NonTerminal(\"baz\"), Terminal(\"buzz\")),\n            Expression(\"fizz\"),\n            parameters={'AR':20}\n            )\n        )\n</code></pre> <p>  foo   bar   baz   buzz   fizz  </p> </li> </ul>"},{"location":"library/basic_usage/#alternatingsequence","title":"AlternatingSequence","text":"<p>This block means that the two arguments may repeat any number of times, by alternating between the two. You have to take at least one of the two elements.</p> <p>The constructor for <code>AlternatingSequence</code> takes exactly two elements and an optional parameter dictionary (to modify the arc radius of curves).</p> <p>Examples</p> <ul> <li> <p>A simple alternating sequence</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, AlternatingSequence\nd = Diagram(AlternatingSequence(\"foo\", \"bar\"))\n</code></pre> <p>  foo   bar  </p> </li> <li> <p>A customized alternating sequence with more elements</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, AlternatingSequence, Sequence, Terminal, NonTerminal\nd = Diagram(\n        AlternatingSequence(\n            Sequence(NonTerminal(\"foo\"), Terminal(\"bar\")),\n            Sequence(NonTerminal(\"baz\"), Terminal(\"buzz\")),\n            parameters={'AR':20}\n            )\n        )\n</code></pre> <p>  foo   bar   baz   buzz  </p> </li> </ul>"},{"location":"library/basic_usage/#choice","title":"Choice","text":"<p>This block lets you choose one element among multiple elements.</p> <p>The constructor for <code>Choice</code> takes one integer (index for the default element, starting at 0), one or more elements and an optional parameter dictionary (to modify the arc radius of curves or the vertical seperation between lines).</p> <p>Examples</p> <ul> <li> <p>A simple choice</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, Choice\nd = Diagram(Choice(0, \"foo\", \"bar\"))\n</code></pre> <p>  foo   bar  </p> </li> <li> <p>A customized choice with more elements</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, Choice, Sequence, Terminal, NonTerminal\nd = Diagram(\n        Choice(\n            1,\n            Sequence(NonTerminal(\"foo\"), Terminal(\"bar\")),\n            Sequence(NonTerminal(\"baz\"), Terminal(\"buzz\")),\n            parameters={'VS':50, 'AR': 5}\n            )\n        )\n</code></pre> <p>  foo   bar   baz   buzz  </p> </li> </ul>"},{"location":"library/basic_usage/#multiplechoice","title":"MultipleChoice","text":"<p>This block lets you choose one or more elements among multiple elements. Unlike Choice, more than one branch can be taken.</p> <p>The constructor for <code>MultipleChoice</code> takes one integer (index for the default element, starting at 0), one of \"any\" (at least one branch must be taken) or \"all\" (all branches must be taken), one or more elements and an optional parameter dictionary (to modify the arc radius of curves or the vertical seperation between lines).</p> <p>Examples</p> <ul> <li> <p>A simple alternating sequence</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, MultipleChoice\nd = Diagram(MultipleChoice(0, \"any\", \"foo\", \"bar\"))\n</code></pre> <p>  foo   bar   take one or more branches, once each, in any order   1+   \u21ba  </p> </li> <li> <p>A customized alternating sequence with more elements</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, MultipleChoice, Sequence, Terminal, NonTerminal\nd = Diagram(\n        MultipleChoice(\n            1, \"all\",\n            Sequence(NonTerminal(\"foo\"), Terminal(\"bar\")),\n            Sequence(NonTerminal(\"baz\"), Terminal(\"buzz\")),\n            parameters={'VS':50, 'AR': 5}\n            )\n        )\n</code></pre> <p>  foo   bar   baz   buzz   take all branches, once each, in any order   all   \u21ba  </p> </li> </ul>"},{"location":"library/basic_usage/#horizontalchoice","title":"HorizontalChoice","text":"<p>This block lets you choose one element among multiple elements. Unlike Choice, items are stacked horizontally, there is no default choice.</p> <p>The constructor for <code>HorizontalChoice</code> takes one or more elements and an optional parameter dictionary (to modify the arc radius of curves or the vertical seperation between lines).</p> <p>Examples</p> <ul> <li> <p>A simple choice</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, HorizontalChoice\nd = Diagram(HorizontalChoice(\"foo\", \"bar\"))\n</code></pre> <p>  foo   bar  </p> </li> <li> <p>A customized choice with more elements</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, HorizontalChoice, Stack, Terminal, NonTerminal\nd = Diagram(\n        HorizontalChoice(\n            Stack(NonTerminal(\"foo\"), Terminal(\"bar\")),\n            Stack(NonTerminal(\"baz\"), Terminal(\"buzz\")),\n            parameters={'VS':50, 'AR': 5}\n            )\n        )\n</code></pre> <p>  foo   bar   baz   buzz  </p> </li> </ul>"},{"location":"library/basic_usage/#optional","title":"optional","text":"<p>This pseudo-block is a shortcut for <code>Choice(skip?, Skip(), element)</code>.</p> <p><code>optional</code> takes one element, an optional boolean (default: <code>False</code>) indicating if skipping is the default, and an optional parameter dictionary (to modify the arc radius of curves or the vertical seperation between lines).</p> <p>Examples</p> <ul> <li> <p>optional with skip = False     SourceResult <pre><code>from pyrailroad.elements import Diagram, optional\nd = Diagram(optional(\"foo\", False))\n</code></pre> <p>  foo  </p> </p> </li> <li> <p>optional with skip = True and customization     SourceResult <pre><code>from pyrailroad.elements import Diagram, optional\nd = Diagram(optional(\"foo\", True, parameters={'VS':50, 'AR': 5}))\n</code></pre> <p>  foo  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#oneormore","title":"OneOrMore","text":"<p>This lets you repeat an element.</p> <p>The contructor for <code>OneOrMore</code> takes one item, an optional repeated item (for example a comment) and an optional parameter dictionary (to modify the arc radius of curves or the vertical seperation between lines).</p> <p>Examples</p> <ul> <li> <p>OneOrMore with no repeat item     SourceResult <pre><code>from pyrailroad.elements import Diagram, OneOrMore\nd = Diagram(OneOrMore(\"foo\"))\n</code></pre> <p>  foo  </p> </p> </li> <li> <p>OneOrMore with a repeat item and customization     SourceResult <pre><code>from pyrailroad.elements import Diagram, OneOrMore, Comment\nd = Diagram(OneOrMore(\"foo\", Comment(\"bar\"), parameters={'VS':50, 'AR': 5}))\n</code></pre> <p>  foo   bar  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#zero_or_more","title":"zero_or_more","text":"<p>This pseudo block is a shortcut for <code>optional(OneOrMore(child, repeat), skip)</code>.</p> <p><code>zero_or_more</code> takes one element, an optional repeated item, an optional boolean (default: False) indicating if skipping is the default, and an optional parameter dictionary (to modify the arc radius of curves or the vertical seperation between lines).</p> <p>Examples</p> <ul> <li> <p>zero_or_more with no repeat item     SourceResult <pre><code>from pyrailroad.elements import Diagram, zero_or_more\nd = Diagram(zero_or_more(\"foo\"))\n</code></pre> <p>  foo  </p> </p> </li> <li> <p>zero_or_more with a repeat item and customization     SourceResult <pre><code>from pyrailroad.elements import Diagram, zero_or_more, Comment\nd = Diagram(zero_or_more(\"foo\", Comment(\"bar\"), True, parameters={'VS':50, 'AR': 5}))\n</code></pre> <p>  foo   bar  </p> </p> </li> </ul>"},{"location":"library/basic_usage/#group","title":"Group","text":"<p>This lets you highlight an element with a dashed outline.</p> <p>The constructor for <code>Group</code> takes an element, an optioanl label and an optional parameter dictionary (to modify the arc radius of curves or the vertical seperation between lines).</p> <p>Examples</p> <ul> <li> <p>A group with no label</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, Choice, Group\nd = Diagram(\"foo\", Group(Choice(0, \"opt1\", \"opt2\")) ,\"bar\")\n</code></pre> <p>  foo   opt1   opt2   bar  </p> </li> <li> <p>A group with a label and customization</p> SourceResult <pre><code>from pyrailroad.elements import Diagram, Choice, Group\nd = Diagram(\"foo\", Group(Choice(0, \"opt1\", \"opt2\"), \"a group\", parameters={'VS':50, 'AR': 5}) ,\"bar\")\n</code></pre> <p>  foo   opt1   opt2   a group   bar  </p> </li> </ul>"},{"location":"library/library/","title":"Code documentation","text":"<p>WIP</p>"},{"location":"library/library/#pyrailroadelements","title":"pyrailroad.elements","text":""},{"location":"library/library/#base-elements","title":"Base elements","text":""},{"location":"library/library/#pyrailroad.elements.Diagram","title":"Diagram","text":"<p>               Bases: <code>DiagramMultiContainer</code></p>"},{"location":"library/library/#pyrailroad.elements.Start","title":"Start","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#pyrailroad.elements.End","title":"End","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#text-elements","title":"Text elements","text":""},{"location":"library/library/#pyrailroad.elements.Expression","title":"Expression","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#pyrailroad.elements.Terminal","title":"Terminal","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#pyrailroad.elements.NonTerminal","title":"NonTerminal","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#pyrailroad.elements.Comment","title":"Comment","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#pyrailroad.elements.Arrow","title":"Arrow","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#pyrailroad.elements.Skip","title":"Skip","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#block-elements","title":"Block elements","text":""},{"location":"library/library/#pyrailroad.elements.Sequence","title":"Sequence","text":"<p>               Bases: <code>DiagramMultiContainer</code></p>"},{"location":"library/library/#pyrailroad.elements.Stack","title":"Stack","text":"<p>               Bases: <code>DiagramMultiContainer</code></p>"},{"location":"library/library/#pyrailroad.elements.OptionalSequence","title":"OptionalSequence","text":"<p>               Bases: <code>DiagramMultiContainer</code></p>"},{"location":"library/library/#pyrailroad.elements.AlternatingSequence","title":"AlternatingSequence","text":"<p>               Bases: <code>DiagramMultiContainer</code></p>"},{"location":"library/library/#pyrailroad.elements.Choice","title":"Choice","text":"<p>               Bases: <code>DiagramMultiContainer</code></p>"},{"location":"library/library/#pyrailroad.elements.MultipleChoice","title":"MultipleChoice","text":"<p>               Bases: <code>DiagramMultiContainer</code></p>"},{"location":"library/library/#pyrailroad.elements.HorizontalChoice","title":"HorizontalChoice","text":"<p>               Bases: <code>DiagramMultiContainer</code></p>"},{"location":"library/library/#pyrailroad.elements.optional","title":"optional","text":"<pre><code>optional(item: Node, skip: bool = False, parameters: AttrsT = dict()) -&gt; Choice\n</code></pre>"},{"location":"library/library/#pyrailroad.elements.OneOrMore","title":"OneOrMore","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#pyrailroad.elements.zero_or_more","title":"zero_or_more","text":"<pre><code>zero_or_more(item: Node, repeat: Optional[Node] = None, skip: bool = False, parameters: AttrsT = dict()) -&gt; Choice\n</code></pre>"},{"location":"library/library/#pyrailroad.elements.Group","title":"Group","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#misc","title":"Misc","text":""},{"location":"library/library/#pyrailroad.elements.DiagramItem","title":"DiagramItem","text":"<p>Methods:</p> Name Description <code>__init__</code> <p>Create a new DiagramItem.</p>"},{"location":"library/library/#pyrailroad.elements.DiagramItem.__init__","title":"__init__","text":"<pre><code>__init__(name: str, attrs: Optional[AttrsT] = None, text: Optional[Node] = None, parameters: AttrsT = dict())\n</code></pre> <p>Create a new DiagramItem.</p> <p>DiagramItems are the building blocks of a Diagram. They are both logical diagram elements and SVG elements.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the DiagramItem, used for debugging.</p> required <code>attrs</code> <code>Optional[AttrsT]</code> <p>The SVG attributes for the DiagramItem.</p> <code>None</code> <code>text</code> <code>Optional[Node]</code> <p>The text of the DiagramItem, if it is a text element.</p> <code>None</code> <code>parameters</code> <code>AttrsT</code> <p>The diagram parameters.</p> <code>dict()</code> <p>Some of the diagram parameters will be initialized to default values if not provided, they are:</p> <ul> <li>debug: enable debug information</li> <li>stroke_odd_pixel_length: whether the stroke width is an odd (1px, 3px, etc) pixel length</li> <li>diagram_class: the class to put on the root <code>&lt;svg&gt;</code> element</li> <li>VS: the minimum vertical separation between things</li> <li>AR: the minimum horizontal separation between things</li> <li>char_width: the width of each monospace character</li> <li>comment_char_width: the width of each comment character</li> <li>internal_alignment: how to align items when they have extra space (left/right/center)</li> <li>escape_html: should Diagram.write_text() produce HTML-escaped text, or raw?</li> </ul> <p>The default values for these parameters can be found in defaults.py</p>"},{"location":"library/library/#pyrailroad.elements.DiagramMultiContainer","title":"DiagramMultiContainer","text":"<p>               Bases: <code>DiagramItem</code></p>"},{"location":"library/library/#pyrailroad.elements.Path","title":"Path","text":""},{"location":"library/library/#pyrailroad.elements.Style","title":"Style","text":""},{"location":"library/library/#pyrailroad.elements.TextDiagram","title":"TextDiagram","text":"<p>Methods:</p> Name Description <code>alter</code> <p>Create and return a new TextDiagram based on this instance, with the specified changes.</p> <code>angle_rect</code> <p>Create and return a new TextDiagram for a rectangular box with rounded corners.</p> <code>append_below</code> <p>Create and return a new TextDiagram by appending the specified lines below this instance's data,</p> <code>append_right</code> <p>Create and return a new TextDiagram by appending the specified TextDiagram to the right of this instance's data,</p> <code>center</code> <p>Create and return a new TextDiagram by centering the data of this instance within a new, equal or larger widtth.</p> <code>copy</code> <p>Create and return a new TextDiagram by copying this instance's data.</p> <code>expand</code> <p>Create and return a new TextDiagram by expanding this instance's data by the specified amount in the specified directions.</p> <code>rect</code> <p>Create and return a new TextDiagram for a rectangular box.</p> <code>round_rect</code> <p>Create and return a new TextDiagram for a rectangular box with rounded corners.</p> <code>set_formatting</code> <p>Set the characters to use for drawing text diagrams.</p>"},{"location":"library/library/#pyrailroad.elements.TextDiagram.alter","title":"alter","text":"<pre><code>alter(entry: Optional[int] = None, exit: Optional[int] = None, lines: Optional[List[str]] = None) -&gt; TextDiagram\n</code></pre> <p>Create and return a new TextDiagram based on this instance, with the specified changes.</p> <p>Note: This is used sparingly, and may be a bad idea.</p>"},{"location":"library/library/#pyrailroad.elements.TextDiagram.angle_rect","title":"angle_rect  <code>classmethod</code>","text":"<pre><code>angle_rect(item: Union[str, TextDiagram], dashed=False) -&gt; TextDiagram\n</code></pre> <p>Create and return a new TextDiagram for a rectangular box with rounded corners.</p>"},{"location":"library/library/#pyrailroad.elements.TextDiagram.append_below","title":"append_below","text":"<pre><code>append_below(item: TextDiagram, lines_between: List[str], move_entry=False, move_exit=False) -&gt; TextDiagram\n</code></pre> <p>Create and return a new TextDiagram by appending the specified lines below this instance's data, and then appending the specified TextDiagram below those lines, possibly setting the resulting TextDiagram's entry and or exit indices to those of the appended item.</p>"},{"location":"library/library/#pyrailroad.elements.TextDiagram.append_right","title":"append_right","text":"<pre><code>append_right(item: TextDiagram, charsBetween: str) -&gt; TextDiagram\n</code></pre> <p>Create and return a new TextDiagram by appending the specified TextDiagram to the right of this instance's data, aligning the left-hand exit and the right-hand entry points.  The charsBetween are inserted between the left-exit and right-entry, and equivalent spaces on all other lines.</p>"},{"location":"library/library/#pyrailroad.elements.TextDiagram.center","title":"center","text":"<pre><code>center(width: int, pad: str) -&gt; TextDiagram\n</code></pre> <p>Create and return a new TextDiagram by centering the data of this instance within a new, equal or larger widtth.</p>"},{"location":"library/library/#pyrailroad.elements.TextDiagram.copy","title":"copy","text":"<pre><code>copy() -&gt; TextDiagram\n</code></pre> <p>Create and return a new TextDiagram by copying this instance's data.</p>"},{"location":"library/library/#pyrailroad.elements.TextDiagram.expand","title":"expand","text":"<pre><code>expand(left: int, right: int, top: int, bottom: int) -&gt; TextDiagram\n</code></pre> <p>Create and return a new TextDiagram by expanding this instance's data by the specified amount in the specified directions.</p>"},{"location":"library/library/#pyrailroad.elements.TextDiagram.rect","title":"rect  <code>classmethod</code>","text":"<pre><code>rect(item: Union[str, TextDiagram], dashed=False) -&gt; TextDiagram\n</code></pre> <p>Create and return a new TextDiagram for a rectangular box.</p>"},{"location":"library/library/#pyrailroad.elements.TextDiagram.round_rect","title":"round_rect  <code>classmethod</code>","text":"<pre><code>round_rect(item: Union[str, TextDiagram], dashed=False) -&gt; TextDiagram\n</code></pre> <p>Create and return a new TextDiagram for a rectangular box with rounded corners.</p>"},{"location":"library/library/#pyrailroad.elements.TextDiagram.set_formatting","title":"set_formatting  <code>classmethod</code>","text":"<pre><code>set_formatting(characters: Optional[Dict[str, str]] = None, defaults: Optional[Dict[str, str]] = None) -&gt; None\n</code></pre> <p>Set the characters to use for drawing text diagrams.</p>"}]}